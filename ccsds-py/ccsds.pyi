import typing

class PrimaryHeader:
    def __init__(self, buf: bytes) -> None: ...
    def version(self) -> int: ...
    def type_flag(self) -> int: ...
    def has_secondary_header(self) -> bool: ...
    def apid(self) -> int: ...
    def sequence_flags(self) -> int: ...
    def sequence_id(self) -> int: ...
    def len_minus1(self) -> int: ...

class Packet:
    def __init__(self, buf: bytes) -> None: ...
    def header(self) -> PrimaryHeader: ...
    def data(self) -> bytes: ...

class PacketGroup:
    def apid(self) -> int: ...
    def packets(self) -> list[Packet]: ...
    def complete(self) -> bool: ...
    def have_missing(self) -> bool: ...

def decode_packets(source: str) -> typing.Iterable[Packet]: ...
def decode_packet_groups(source: str) -> typing.Iterable[PacketGroup]: ...
